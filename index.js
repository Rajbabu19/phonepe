const express = require('express');
const axios = require('axios');
const crypto = require('crypto');
const cors = require('cors');
require('dotenv').config(); // .env рдлрд╝рд╛рдЗрд▓ рд╕реЗ рд╡реЗрд░рд┐рдПрдмрд▓реНрд╕ рд▓реЛрдб рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП

const app = express();

// --- Middleware ---
// 1. CORS: рдЖрдкрдХреЗ frontend (dfordeal.shop) рд╕реЗ рдЖрдиреЗ рд╡рд╛рд▓реА рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдХреЛ рдЕрд▓рд╛рдЙ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП
app.use(cors()); 
// 2. JSON Parser: frontend рд╕реЗ рднреЗрдЬреЗ рдЧрдП JSON рдбреЗрдЯрд╛ рдХреЛ рдкрдврд╝рдиреЗ рдХреЗ рд▓рд┐рдП
app.use(express.json());

// --- рдПрдирд╡рд╛рдпрд░рдирдореЗрдВрдЯ рд╡реЗрд░рд┐рдПрдмрд▓реНрд╕ (рдЖрдкрдХреА рд╕реАрдХреНрд░реЗрдЯ рдХреАрдЬрд╝) ---
const MERCHANT_ID = process.env.PHONEPE_MERCHANT_ID;
const SALT_KEY = process.env.PHONEPE_SALT_KEY;
const SALT_INDEX = process.env.PHONEPE_SALT_INDEX;

// PhonePe рдХрд╛ LIVE API URL
const PHONEPE_PAY_URL = "https://api.phonepe.com/pg/v1/pay";

// --- API Endpoints ---

/**
 * =================================================================
 * 1. рдкреЗрдореЗрдВрдЯ рд╢реБрд░реВ рдХрд░рдиреЗ рд╡рд╛рд▓рд╛ рдПрдВрдбрдкреЙрдЗрдВрдЯ
 * =================================================================
 * рдпрд╣ рд╡рд╣ рдПрдВрдбрдкреЙрдЗрдВрдЯ рд╣реИ рдЬрд┐рд╕реЗ рдЖрдкрдХрд╛ HTML рдкреЗрдЬ рдХреЙрд▓ рдХрд░реЗрдЧрд╛ред
 * frontend рд╕реЗ `PAYMENT_BACKEND_URL` рдХреЛ рдЗрд╕ рдкрд░ рд╕реЗрдЯ рдХрд░реЗрдВред
 * рдЬреИрд╕реЗ: 'https://your-backend.onrender.com/initiate-phonepe-payment'
 */
app.post('/initiate-phonepe-payment', async (req, res) => {
    
    try {
        // 1. Frontend рд╕реЗ рдЖрдпрд╛ рдбреЗрдЯрд╛ (рдпрд╣ рд╡рд╣реА 'data' рдСрдмреНрдЬреЗрдХреНрдЯ рд╣реИ рдЬреЛ рдЖрдкрдиреЗ JS рдореЗрдВ рдмрдирд╛рдпрд╛ рдерд╛)
        const frontendData = req.body.data;
        
        // 2. рдПрдХ рдпреВрдирд┐рдХ рдЯреНрд░рд╛рдВрдЬреЗрдХреНрд╢рди ID рдмрдирд╛рдПрдБ
        const merchantTransactionId = `MUID-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
        
        // 3. PhonePe API рдХреЗ рд▓рд┐рдП рдкреЗрд▓реЛрдб (Payload) рддреИрдпрд╛рд░ рдХрд░реЗрдВ
        const payload = {
            merchantId: MERCHANT_ID,
            merchantTransactionId: merchantTransactionId,
            merchantUserId: frontendData.customer_details.customer_id,
            amount: frontendData.amount * 100, // **рд╕рдмрд╕реЗ рдЬрд╝рд░реВрд░реА: PhonePe рдХреЛ amount "paise" рдореЗрдВ рдЪрд╛рд╣рд┐рдП**
            redirectUrl: frontendData.success_return_url,
            redirectMode: "POST", // 'POST' рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ рддрд╛рдХрд┐ рдЖрдк рдкреЗрдореЗрдВрдЯ рдХреЗ рдмрд╛рдж рдбреЗрдЯрд╛ рдХреЛ рд╡реЗрд░рд┐рдлрд╛рдИ рдХрд░ рд╕рдХреЗрдВ
            
            // рдпрд╣ рд╡рд╣ URL рд╣реИ рдЬрд┐рд╕ рдкрд░ PhonePe рдкреЗрдореЗрдВрдЯ рдХреЗ рдмрд╛рдж рд╕рд░реНрд╡рд░-рд╕реЗ-рд╕рд░реНрд╡рд░ рдкрд┐рдВрдЧ рдХрд░реЗрдЧрд╛
            callbackUrl: "https://phonepe-1q12.onrender.com/phonepe-callback", // <<< рдЕрдкрдирд╛ рдЦреБрдж рдХрд╛ callback URL рдпрд╣рд╛рдБ рдбрд╛рд▓реЗрдВ
            
            mobileNumber: frontendData.customer_details.customer_phone,
            paymentInstrument: {
                type: "PAY_PAGE" // рдпрд╣ рдпреВрдЬрд╝рд░ рдХреЛ PhonePe рдХреЗ рдкреЗрдореЗрдВрдЯ рдкреЗрдЬ рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдЧрд╛
            }
        };

        // 4. рдкреЗрд▓реЛрдб рдХреЛ Base64 рдореЗрдВ рдПрдиреНрдХреЛрдб рдХрд░реЗрдВ
        const base64Payload = Buffer.from(JSON.stringify(payload)).toString('base64');

        // 5. X-VERIFY рд╕рд┐рдЧреНрдиреЗрдЪрд░ (Signature) рдмрдирд╛рдПрдБ
        // рдпрд╣ PhonePe рдЗрдВрдЯреАрдЧреНрд░реЗрд╢рди рдХрд╛ рд╕рдмрд╕реЗ рдореБрд╢реНрдХрд┐рд▓ рд╣рд┐рд╕реНрд╕рд╛ рд╣реИ
        const stringToHash = base64Payload + "/pg/v1/pay" + SALT_KEY;
        const sha256Hash = crypto.createHash('sha256').update(stringToHash).digest('hex');
        const xVerifyHeader = sha256Hash + "###" + SALT_INDEX;

        // 6. Axios (HTTP рдХреНрд▓рд╛рдЗрдВрдЯ) рдХреЗ рд▓рд┐рдП рдСрдкреНрд╢рди рддреИрдпрд╛рд░ рдХрд░реЗрдВ
        const options = {
            method: 'post',
            url: PHONEPE_PAY_URL,
            headers: {
                'Content-Type': 'application/json',
                'X-VERIFY': xVerifyHeader
            },
            data: {
                request: base64Payload // **рдзреНрдпрд╛рди рджреЗрдВ: рдкреЗрд▓реЛрдб 'request' рдХреА (key) рдХреЗ рдЕрдВрджрд░ рднреЗрдЬрд╛ рдЬрд╛рддрд╛ рд╣реИ**
            }
        };

        // 7. PhonePe API рдХреЛ рдХреЙрд▓ рдХрд░реЗрдВ
        console.log("PhonePe рдХреЛ рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рднреЗрдЬреА рдЬрд╛ рд░рд╣реА рд╣реИ...");
        const response = await axios(options);
        console.log("PhonePe рд╕реЗ рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рдорд┐рд▓рд╛:", response.data);

        // 8. PhonePe рд╕реЗ рдорд┐рд▓рд╛ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ URL рд╡рд╛рдкрд╕ Frontend рдХреЛ рднреЗрдЬреЗрдВ
        if (response.data.success && response.data.data.instrumentResponse.redirectInfo.url) {
            
            const redirectUrl = response.data.data.instrumentResponse.redirectInfo.url;
            
            // рдпрд╣ рд╡рд╣реА рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рд╣реИ рдЬрд┐рд╕рдХрд╛ рдЖрдкрдХрд╛ Frontend рдЗрдВрддрдЬрд╝рд╛рд░ рдХрд░ рд░рд╣рд╛ рд╣реИ
            res.json({
                success: true,
                redirectUrl: redirectUrl
            });
        } else {
            // рдЕрдЧрд░ рдХреЛрдИ рдПрд░рд░ рдЖрддреА рд╣реИ
            res.status(500).json({ 
                success: false, 
                message: response.data.message || "PhonePe рд╕реЗ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ URL рдирд╣реАрдВ рдорд┐рд▓рд╛" 
            });
        }

    } catch (error) {
        // рдПрд░рд░ рд╣реИрдВрдбрд▓рд┐рдВрдЧ
        console.error("рдкреЗрдореЗрдВрдЯ рд╢реБрд░реВ рдХрд░рдиреЗ рдореЗрдВ рдПрд░рд░:", error.message);
        if (error.response) {
            console.error("PhonePe Error Response:", error.response.data);
            res.status(500).json({ success: false, message: error.response.data.message });
        } else {
            res.status(500).json({ success: false, message: error.message });
        }
    }
});


/**
 * =================================================================
 * 2. рд╕рд░реНрд╡рд░-рд╕реЗ-рд╕рд░реНрд╡рд░ рдХреЙрд▓рдмреИрдХ рдПрдВрдбрдкреЙрдЗрдВрдЯ
 * =================================================================
 * рдпрд╣ рд╡рд╣ URL рд╣реИ рдЬреЛ рдЖрдкрдиреЗ рдКрдкрд░ `callbackUrl` рдореЗрдВ рд╕реЗрдЯ рдХрд┐рдпрд╛ рдерд╛ред
 * PhonePe рдкреЗрдореЗрдВрдЯ рдкреВрд░рд╛ рд╣реЛрдиреЗ рдкрд░ рдЗрд╕ рдПрдВрдбрдкреЙрдЗрдВрдЯ рдХреЛ рдмреИрдХрдЧреНрд░рд╛рдЙрдВрдб рдореЗрдВ рдкрд┐рдВрдЧ рдХрд░реЗрдЧрд╛ред
 * рдпрд╣рд╛рдБ рдЖрдк рдЕрдкрдиреЗ рдбреЗрдЯрд╛рдмреЗрд╕ рдореЗрдВ рдСрд░реНрдбрд░ рдХреЛ "Paid" рдорд╛рд░реНрдХ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред
 */
app.post('/phonepe-callback', (req, res) => {
    
    console.log("--- PhonePe рдХреЙрд▓рдмреИрдХ ---");
    
    try {
        // PhonePe рдПрдХ 'X-VERIFY' рд╣реЗрдбрд░ рднреА рднреЗрдЬреЗрдЧрд╛, рдЖрдкрдХреЛ рдЙрд╕реЗ рдпрд╣рд╛рдБ рд╡реЗрд░рд┐рдлрд╛рдИ рдХрд░рдирд╛ рдЪрд╛рд╣рд┐рдП
        // (рдпрд╣ рдЖрдкрдХреА рд╣реЛрдо рдЕрд╕рд╛рдЗрдирдореЗрдВрдЯ рд╣реИ: X-VERIFY рдХреЛ рд╡реИрд╕реЗ рд╣реА рд╡реЗрд░рд┐рдлрд╛рдИ рдХрд░реЗрдВ рдЬреИрд╕реЗ рдКрдкрд░ рдХрд┐рдпрд╛ рдерд╛)
        
        // PhonePe рд╕реЗ рдорд┐рд▓рд╛ рдкреЗрд▓реЛрдб (Base64 рдПрдиреНрдХреЛрдбреЗрдб)
        const base64Response = req.body.response;

        if (!base64Response) {
            console.log("рдЦрд╛рд▓реА рдХреЙрд▓рдмреИрдХ рдорд┐рд▓рд╛ред");
            return res.status(400).send("Bad Request: No response payload");
        }

        // Base64 рдХреЛ рдбреАрдХреЛрдб рдХрд░реЗрдВ
        const decodedResponse = Buffer.from(base64Response, 'base64').toString('utf8');
        const data = JSON.parse(decodedResponse);

        console.log("рдХреЙрд▓рдмреИрдХ рдбреЗрдЯрд╛:", JSON.stringify(data, null, 2));

        // 1. рдЯреНрд░рд╛рдВрдЬреЗрдХреНрд╢рди ID рдФрд░ рд╕реНрдерд┐рддрд┐ (Status) рдЪреЗрдХ рдХрд░реЗрдВ
        const merchantTransactionId = data.data.merchantTransactionId;
        const paymentStatus = data.code; // e.g., "PAYMENT_SUCCESS"

        if (paymentStatus === "PAYMENT_SUCCESS") {
            // 2. ЁЯФФ рдпрд╣рд╛рдБ рдЕрдкрдирд╛ рдбреЗрдЯрд╛рдмреЗрд╕ рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ ЁЯФФ
            // рдЙрджрд╛. 
            // await database.orders.update(
            //   { transactionId: merchantTransactionId },
            //   { status: "Paid" }
            // );
            console.log(`рдкреЗрдореЗрдВрдЯ рд╕рдлрд▓: ${merchantTransactionId}. рдбреЗрдЯрд╛рдмреЗрд╕ рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВред`);

        } else if (paymentStatus === "PAYMENT_ERROR") {
            // рдкреЗрдореЗрдВрдЯ рдлреЗрд▓ рд╣реЛ рдЧрдИ
            console.log(`рдкреЗрдореЗрдВрдЯ рдлреЗрд▓: ${merchantTransactionId}. рд╕реНрдерд┐рддрд┐: ${data.message}`);
        } else {
            // рдкреЗрдореЗрдВрдЯ рдкреЗрдВрдбрд┐рдВрдЧ рдпрд╛ рдХреЛрдИ рдФрд░ рд╕реНрдерд┐рддрд┐
            console.log(`рдкреЗрдореЗрдВрдЯ рд╕реНрдерд┐рддрд┐: ${paymentStatus} - ${merchantTransactionId}`);
        }
        
        // 3. PhonePe рдХреЛ рдЬрд╡рд╛рдм рднреЗрдЬреЗрдВ рдХрд┐ рдХреЙрд▓рдмреИрдХ рдорд┐рд▓ рдЧрдпрд╛
        // (рдпрд╣ рдЬрд╝рд░реВрд░реА рдирд╣реАрдВ рд╣реИ, рд▓реЗрдХрд┐рди рдПрдХ рдЕрдЪреНрдЫрд╛ рдЕрднреНрдпрд╛рд╕ рд╣реИ)
        res.status(200).json({ success: true, message: "Callback received" });

    } catch (error) {
        console.error("рдХреЙрд▓рдмреИрдХ рд╣реИрдВрдбрд▓ рдХрд░рдиреЗ рдореЗрдВ рдПрд░рд░:", error.message);
        res.status(500).send("Internal Server Error");
    }
});


// --- рд╕рд░реНрд╡рд░ рд╢реБрд░реВ рдХрд░реЗрдВ ---
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`рд╕рд░реНрд╡рд░ ${PORT} рдкрд░ рдЪрд▓ рд░рд╣рд╛ рд╣реИ...`);
    console.log(`рдорд░реНрдЪреЗрдВрдЯ ID: ${MERCHANT_ID ? MERCHANT_ID.substring(0, 5) + '...' : 'NOT SET'}`);
    console.log(`Salt Key: ${SALT_KEY ? 'SET' : 'NOT SET'}`);

});
