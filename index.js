const express = require('express');
const axios = require('axios');
const crypto = require('crypto');
const cors = require('cors');
require('dotenv').config(); // .env ‡§´‡§º‡§æ‡§á‡§≤ ‡§∏‡•á ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤‡•ç‡§∏ ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è

const app = express();

// --- Middleware ---
app.use(cors()); 
app.use(express.json());

// --- ‡§è‡§®‡§µ‡§æ‡§Ø‡§∞‡§®‡§Æ‡•á‡§Ç‡§ü ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤‡•ç‡§∏ (‡§Ü‡§™‡§ï‡•Ä ‡§∏‡•Ä‡§ï‡•ç‡§∞‡•á‡§ü ‡§ï‡•Ä‡§ú‡§º) ---
const MERCHANT_ID = process.env.PHONEPE_MERCHANT_ID;
const SALT_KEY = process.env.PHONEPE_SALT_KEY;
const SALT_INDEX = process.env.PHONEPE_SALT_INDEX;

// <<< NAYA BADLAV (‡§¨‡•á‡§π‡§§‡§∞ ‡§§‡§∞‡•Ä‡§ï‡§æ) >>>
// ‡§Ö‡§™‡§®‡§æ Render.com URL .env ‡§´‡§º‡§æ‡§á‡§≤ ‡§∏‡•á ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
const BACKEND_HOSTNAME = process.env.BACKEND_HOSTNAME; 

// PhonePe ‡§ï‡§æ LIVE API URL
const PHONEPE_PAY_URL = "https://api.phonepe.com/apis/hermes/pg/v1/pay";

// --- API Endpoints ---

/**
 * =================================================================
 * 1. ‡§™‡•á‡§Æ‡•á‡§Ç‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§è‡§Ç‡§°‡§™‡•â‡§á‡§Ç‡§ü
 * =================================================================
 */
app.post('/initiate-phonepe-payment', async (req, res) => {
    
    try {
        const frontendData = req.body.data;
        
        const merchantTransactionId = `MUID-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
        
        // <<< NAYA BADLAV (‡§¨‡•á‡§π‡§§‡§∞ ‡§§‡§∞‡•Ä‡§ï‡§æ) >>>
        // callbackUrl ‡§ï‡•ã ‡§π‡§æ‡§∞‡•ç‡§°‡§ï‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§¨‡§ú‡§æ‡§Ø .env ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
        if (!BACKEND_HOSTNAME) {
            throw new Error("BACKEND_HOSTNAME .env ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à");
        }
        const callbackUrl = `${BACKEND_HOSTNAME}/phonepe-callback`;

        const payload = {
            merchantId: MERCHANT_ID,
            merchantTransactionId: merchantTransactionId,
            merchantUserId: frontendData.customer_details.customer_id,
            amount: frontendData.amount * 100, // **'paise' ‡§Æ‡•á‡§Ç**
            redirectUrl: frontendData.success_return_url,
            redirectMode: "POST", 
            callbackUrl: callbackUrl, // ‡§Ö‡§™‡§°‡•á‡§ü‡•á‡§°
            mobileNumber: frontendData.customer_details.customer_phone,
            paymentInstrument: {
                type: "PAY_PAGE"
            }
        };

        const base64Payload = Buffer.from(JSON.stringify(payload)).toString('base64');
        const stringToHash = base64Payload + "/pg/v1/pay" + SALT_KEY;
        const sha256Hash = crypto.createHash('sha256').update(stringToHash).digest('hex');
        const xVerifyHeader = sha256Hash + "###" + SALT_INDEX;

        const options = {
            method: 'post',
            url: PHONEPE_PAY_URL,
            headers: {
                'Content-Type': 'application/json',
                'X-VERIFY': xVerifyHeader
            },
            data: {
                request: base64Payload
            }
        };

        console.log("PhonePe ‡§ï‡•ã ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§≠‡•á‡§ú‡•Ä ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à...");
        const response = await axios(options);
        console.log("PhonePe ‡§∏‡•á ‡§∞‡§ø‡§∏‡•ç‡§™‡•â‡§®‡•ç‡§∏ ‡§Æ‡§ø‡§≤‡§æ:", response.data);

        if (response.data.success && response.data.data.instrumentResponse.redirectInfo.url) {
            const redirectUrl = response.data.data.instrumentResponse.redirectInfo.url;
            res.json({
                success: true,
                redirectUrl: redirectUrl
            });
        } else {
            res.status(500).json({ 
                success: false, 
                message: response.data.message || "PhonePe ‡§∏‡•á ‡§∞‡•Ä‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü URL ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ" 
            });
        }

    } catch (error) {
        // <<< ============ ZAROORI BADLAV YAHAN HAI ============ >>>
        // ‡§è‡§∞‡§∞ ‡§π‡•à‡§Ç‡§°‡§≤‡§ø‡§Ç‡§ó ‡§ï‡•ã ‡§†‡•Ä‡§ï ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à

        console.error("‡§™‡•á‡§Æ‡•á‡§Ç‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§è‡§∞‡§∞:", error.message);
        
        if (error.response) {
            // ‡§Ö‡§ó‡§∞ PhonePe ‡§ï‡•á ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§∏‡•á ‡§è‡§∞‡§∞ ‡§Ü‡§Ø‡§æ ‡§π‡•à (‡§ú‡•à‡§∏‡•á 404, 500)
            console.error("PhonePe Error Response:", error.response.data);
            
            const errorData = error.response.data;
            // PhonePe ‡§ï‡§≠‡•Ä 'message' ‡§≠‡•á‡§ú‡§§‡§æ ‡§π‡•à, ‡§ï‡§≠‡•Ä 'code'‡•§ ‡§π‡§Æ ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§
            const errorMessage = errorData.message || errorData.code || JSON.stringify(errorData);
            
            res.status(500).json({ success: false, message: errorMessage });
        
        } else {
            // ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à ‡§î‡§∞ ‡§è‡§∞‡§∞ (‡§ú‡•à‡§∏‡•á ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï) ‡§Ü‡§§‡•Ä ‡§π‡•à
            res.status(500).json({ success: false, message: error.message });
        }
        // <<< ================================================== >>>
    }
});


/**
 * =================================================================
 * 2. ‡§∏‡§∞‡•ç‡§µ‡§∞-‡§∏‡•á-‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§ï‡•â‡§≤‡§¨‡•à‡§ï ‡§è‡§Ç‡§°‡§™‡•â‡§á‡§Ç‡§ü (‡§Ö‡§¨ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§)
 * =================================================================
 */
app.post('/phonepe-callback', (req, res) => {
    
    console.log("--- PhonePe ‡§ï‡•â‡§≤‡§¨‡•à‡§ï ‡§Æ‡§ø‡§≤‡§æ ---");
    
    try {
        // <<< ============ ZAROORI SURAKSHA BADLAV ============ >>>
        // 1. PhonePe ‡§∏‡•á ‡§Æ‡§ø‡§≤‡§æ ‡§π‡•á‡§°‡§∞
        const xVerifyHeader = req.headers['x-verify'];

        // 2. PhonePe ‡§∏‡•á ‡§Æ‡§ø‡§≤‡§æ ‡§™‡•á‡§≤‡•ã‡§° (Base64 ‡§è‡§®‡•ç‡§ï‡•ã‡§°‡•á‡§°)
        const base64Response = req.body.response;

        if (!base64Response || !xVerifyHeader) {
            console.log("‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ï‡•â‡§≤‡§¨‡•à‡§ï: ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä ‡§°‡•á‡§ü‡§æ (response ‡§Ø‡§æ x-verify) ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§");
            return res.status(400).send("Bad Request: Invalid callback");
        }
        
        // 3. ‡§∏‡§ø‡§ó‡•ç‡§®‡•á‡§ö‡§∞ ‡§ñ‡•Å‡§¶ ‡§¨‡§®‡§æ‡§è‡§Å (Verify ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è)
        const stringToHash = base64Response + SALT_KEY;
        const sha256Hash = crypto.createHash('sha256').update(stringToHash).digest('hex');
        const calculatedVerifyHeader = sha256Hash + "###" + SALT_INDEX;

        // 4. ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§∏‡§ø‡§ó‡•ç‡§®‡•á‡§ö‡§∞ ‡§ï‡•Ä ‡§§‡•Å‡§≤‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç
        if (xVerifyHeader !== calculatedVerifyHeader) {
            console.error("‡§Ö‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§ï‡•â‡§≤‡§¨‡•à‡§ï! X-VERIFY ‡§∏‡§ø‡§ó‡•ç‡§®‡•á‡§ö‡§∞ ‡§Æ‡•à‡§ö ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§Ü‡•§");
            return res.status(401).send("Unauthorized: Signature mismatch");
        }
        
        // <<< ‡§ú‡§æ‡§Å‡§ö ‡§∏‡§´‡§≤! ‡§Ö‡§¨ ‡§π‡§Æ ‡§á‡§∏ ‡§°‡•á‡§ü‡§æ ‡§™‡§∞ ‡§≠‡§∞‡•ã‡§∏‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç >>>
        console.log("X-VERIFY ‡§∏‡§ø‡§ó‡•ç‡§®‡•á‡§ö‡§∞ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ú‡§æ‡§Å‡§ö‡§æ ‡§ó‡§Ø‡§æ‡•§");

        // 5. Base64 ‡§ï‡•ã ‡§°‡•Ä‡§ï‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
        const decodedResponse = Buffer.from(base64Response, 'base64').toString('utf8');
        const data = JSON.parse(decodedResponse);

        console.log("‡§ï‡•â‡§≤‡§¨‡•à‡§ï ‡§°‡•á‡§ü‡§æ:", JSON.stringify(data, null, 2));

        // 6. ‡§ü‡•ç‡§∞‡§æ‡§Ç‡§ú‡•á‡§ï‡•ç‡§∂‡§® ID ‡§î‡§∞ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø (Status) ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç
        const merchantTransactionId = data.data.merchantTransactionId;
        const paymentStatus = data.code; // e.g., "PAYMENT_SUCCESS"

        if (paymentStatus === "PAYMENT_SUCCESS") {
            // 7. üîî ‡§Ø‡§π‡§æ‡§Å ‡§Ö‡§™‡§®‡§æ ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç üîî
            console.log(`‡§™‡•á‡§Æ‡•á‡§Ç‡§ü ‡§∏‡§´‡§≤: ${merchantTransactionId}. ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§`);

        } else if (paymentStatus === "PAYMENT_ERROR") {
            console.log(`‡§™‡•á‡§Æ‡•á‡§Ç‡§ü ‡§´‡•á‡§≤: ${merchantTransactionId}. ‡§∏‡•ç‡§•‡§ø‡§§‡§ø: ${data.message}`);
        } else {
            console.log(`‡§™‡•á‡§Æ‡•á‡§Ç‡§ü ‡§∏‡•ç‡§•‡§ø‡§§‡§ø: ${paymentStatus} - ${merchantTransactionId}`);
        }
        
        res.status(200).json({ success: true, message: "Callback received" });

    } catch (error) {
        console.error("‡§ï‡•â‡§≤‡§¨‡•à‡§ï ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§è‡§∞‡§∞:", error.message);
        res.status(500).send("Internal Server Error");
    }
});


// --- ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç ---
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`‡§∏‡§∞‡•ç‡§µ‡§∞ ${PORT} ‡§™‡§∞ ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à...`);
    console.log(`‡§Æ‡§∞‡•ç‡§ö‡•á‡§Ç‡§ü ID: ${MERCHANT_ID ? MERCHANT_ID.substring(0, 5) + '...' : 'NOT SET'}`);
    console.log(`Salt Key: ${SALT_KEY ? 'SET' : 'NOT SET'}`);
    // <<< NAYA BADLAV >>>
    console.log(`Backend Host: ${BACKEND_HOSTNAME ? BACKEND_HOSTNAME : 'NOT SET'}`);
});
